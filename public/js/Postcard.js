// Generated by CoffeeScript 1.4.0
(function() {
  var root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.Postcard = (function() {

    function Postcard(domId, layout_json, s, orientation) {
      this.domId = domId;
      this.layout_json = layout_json;
      this.s = s != null ? s : 1 / 2;
      this.orientation = orientation != null ? orientation : 0;
      this.zoomStep = 1.1;
      this.layout = eval('(' + this.layout_json + ')');
      this.imageList = new Array();
      root.s = this;
      this.timeoutIds = new Array();
      this._initCard();
      this._initImages();
      this._initBackground();
      this._initMasks();
      this._initMaterials();
      this._initCovers();
    }

    Postcard.prototype.toJson = function() {
      var jsonObject,
        _this = this;
      jsonObject = new Object();
      if (this.orientation === 1) {
        jsonObject['background'] = 'http://pic.52mxp.com/backgrounds/white_1500x1000.png';
      } else {
        jsonObject['background'] = 'http://pic.52mxp.com/backgrounds/white_1000x1500.png';
      }
      jsonObject['images'] = [];
      this._eachAreas(function(i, left, top, width, height) {
        var crop, image, image_json, img, position, src, _x, _y;
        img = $('#img' + i);
        image = _this.imageList[i];
        position = img.position();
        if (position.left >= 0) {
          _x = left + position.left;
        } else {
          _x = left;
        }
        if (position.top >= 0) {
          _y = top + position.top;
        } else {
          _y = top;
        }
        if (position.left >= 0 && position.top >= 0) {
          crop = null;
        } else if (position.left >= 0 && position.top < 0) {
          crop = 'x' + height / image.scale + 'p0p' + (-position.top / image.scale);
        } else if (position.left < 0 && position.top >= 0) {
          crop = width / image.scale + 'x' + 'p' + (-position.left / image.scale) + 'p0';
        } else {
          crop = width / image.scale + 'x' + height / image.scale + 'p' + (-position.left / image.scale) + 'p' + (-position.top / image.scale);
        }
        if ((src = img.attr('src')) !== '/img/img0.png') {
          image_json = {
            'x': _x / _this.s,
            'y': _y / _this.s,
            'src': src,
            'scale': (image.scale * 100) / _this.s + '%'
          };
          if (crop !== null) {
            image_json['crop'] = crop;
          }
          return jsonObject['images'].push(image_json);
        }
      });
      jsonObject['images'].push({
        'x': 0,
        'y': 0,
        'src': this.layout.background
      });
      this._eachMaterials(function(i, src, left, top, width, height) {
        var material;
        material = $('#material' + i);
        return jsonObject['images'].push({
          'x': material.position().left / _this.s,
          'y': material.position().top / _this.s,
          'src': src
        });
      });
      return JSON.stringify(jsonObject, null, 4);
    };

    Postcard.prototype._initCard = function() {
      var height, width;
      this.card = $('#' + this.domId);
      width = 1000;
      height = 1500;
      if (this.orientation === 1) {
        width = 1500;
        height = 1000;
      }
      return this.card.css({
        'width': width * this.s + 'px',
        'height': height * this.s + 'px',
        'position': 'relative',
        'overflow': 'hidden',
        'background': 'url(/img/bg.png)'
      });
    };

    Postcard.prototype._initImages = function() {
      var _this = this;
      this._eachAreas(function(i, left, top, width, height) {
        var img, _ref;
        _this.card.append('<div id="restrict' + i + '"><img id="img' + i + '" src="/img/img0.png" /></div>');
        img = $('#img' + i);
        img.css('position', 'absolute');
        $('#restrict' + i).css({
          'position': 'absolute',
          'width': width + 'px',
          'height': height + 'px',
          'left': left + 'px',
          'top': top + 'px',
          'overflow': 'hidden'
        });
        _this.imageList[i] = {
          'id': 'img' + i,
          'i': i,
          'scale': 1,
          'current': (_ref = i === 0) != null ? _ref : {
            "true": false
          }
        };

        img.mousewheel(function(event, delta, deltaX, deltaY) {
          alert('hello');
        });
      });
    };

    Postcard.prototype._initBackground = function() {
      var height, width;
      this.card.append('<img id="background" src="' + this.layout.background + '"/>');
      width = 1000;
      height = 1500;
      if (this.orientation === 1) {
        width = 1500;
        height = 1000;
      }
      return $('#background').css({
        'position': 'absolute',
        'width': width * this.s + 'px',
        'height': height * this.s + 'px',
        'left': '0',
        'top': '0'
      });
    };

    Postcard.prototype._initFloatImages = function() {
      var _this = this;
      return this._eachAreas(function(i, left, top, width, height) {
        var floatimg, img;
        img = $('#img' + i);
        _this.card.append('<img id="floatimg' + i + '" src="/img/img' + i + '.png" />');
        floatimg = $('#floatimg' + i);
        return floatimg.css({
          'opacity': 0,
          'position': 'absolute'
        });
      });
    };

    Postcard.prototype._initMasks = function() {
      var _this = this;
      return this._eachAreas(function(i, left, top, width, height) {
        var mask;
        _this.card.append('<div id="mask' + i + '"></div>');
        mask = $('#mask' + i);
        mask.css({
          'position': 'absolute',
          'width': width + 'px',
          'height': height + 'px',
          'left': left + 'px',
          'top': top + 'px',
          'background': 'url(/img/img0.png)'
        });
        _this._addMoveSupport(i, left, top);
        _this._addZoomButtons(i, left, top, width, height);
        mask.on('mouseover', function(e) {
          _this._showZoomButtons(i);
          return mask.css({
            cursor: 'move'
          });
        });
        mask.on('mouseout', function(e) {
          _this._hideZoomButtons(i);
          return mask.css({
            cursor: 'default'
          });
        });
        
      });
    };

    Postcard.prototype._addZoomButtons = function(i, left, top, width, height) {
      var l, t, zoomin, zoomout,
        _this = this;
      this.card.append('<img id="zoomin' + i + '" src="/img/zoomin.png"/>');
      this.card.append('<img id="zoomout' + i + '" src="/img/zoomout.png"/>');
      zoomin = $('#zoomin' + i);
      zoomout = $('#zoomout' + i);
      if (left < 0) {
        l = 5;
      } else {
        l = left + 5;
      }
      if (top < 0) {
        t = 5;
      } else {
        t = top + 5;
      }
      zoomin.css({
        'position': 'absolute',
        'left': (l + 5) + 'px',
        'top': (t + 5) + 'px',
        'width': '32px',
        'height': '32px',
        'visibility': 'hidden'
      });
      zoomout.css({
        'position': 'absolute',
        'left': (l + 5 + 40) + 'px',
        'top': (t + 5) + 'px',
        'width': '32px',
        'height': '32px',
        'visibility': 'hidden'
      });
      zoomin.click(function(e) {
        return _this.zoom_in(i, left, top, width, height);
      });
      zoomout.click(function(e) {
        return _this.zoom_out(i, left, top, width, height);
      });
      zoomin.on('mouseover', function(e) {
        return _this._showZoomButtons(i);
      });
      zoomout.on('mouseover', function(e) {
        return _this._showZoomButtons(i);
      });
      zoomin.on('mouseout', function(e) {
        return _this._hideZoomButtons(i);
      });
      return zoomout.on('mouseout', function(e) {
        return _this._hideZoomButtons(i);
      });
    };

    Postcard.prototype._initMaterials = function() {
      var _this = this;
      return this._eachMaterials(function(i, src, left, top, width, height) {
        var material;
        _this.card.append('<img id="material' + i + '" src="' + src + '" />');
        material = $('#material' + i);
        material.css({
          'position': 'absolute',
          'width': width + 'px',
          'height': height + 'px',
          'left': left + 'px',
          'top': top + 'px'
        });
        return _this._addMoveSupportToMaterial(i);
      });
    };

    Postcard.prototype._initCovers = function() {
      var _this = this;
      return this._eachAreas(function(i, left, top, width, height) {
        var cover, coverImg;
        _this.card.append('<div id="cover' + i + '"><img id="cover_img' + i + '" src="/img/addphoto.png" /></div>');
        cover = $('#cover' + i);
        cover.css({
          'position': 'absolute',
          'width': width + 'px',
          'height': height + 'px',
          'left': left + 'px',
          'top': top + 'px'
        });
        coverImg = $('#cover_img' + i);
        coverImg.css('padding-left', (width / 2 - 21) + 'px');
        return coverImg.css('padding-top', (height / 2 - 21) + 'px');
      });
    };

    Postcard.prototype._eachAreas = function(cb) {
      var area, height, i, left, top, width, _i, _ref;
      for (i = _i = 0, _ref = this.layout.areas.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        area = this.layout.areas[i];
        left = (area.x - area.w / 2) * this.s;
        top = (area.y - area.h / 2) * this.s;
        width = area.w * this.s;
        height = area.h * this.s;
        cb(i, left, top, width, height);
      }
    };

    Postcard.prototype._eachMaterials = function(cb) {
      var height, i, left, material, src, top, width, _i, _ref;
      for (i = _i = 0, _ref = this.layout.materials.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        material = this.layout.materials[i];
        if (material['type'] === '2') {
          src = material['src'];
          left = (material.x - material.w / 2) * this.s;
          top = (material.y - material.h / 2) * this.s;
          width = material.w * this.s;
          height = material.h * this.s;
          cb(i, src, left, top, width, height);
        }
      }
    };

    Postcard.prototype._addMoveSupport = function(i, left, top) {
      var img, mask, zoomin, zoomout,
        _this = this;
      img = $("#img" + i);
      mask = $("#mask" + i);
      zoomin = $('#zoomin' + i);
      zoomout = $('#zoomout' + i);
      mask.bind('movestart', function(e) {
        img.ox = img.position().left;
        img.oy = img.position().top;
        _this._showZoomButtons(i);
        _this._setCurrentImage(i);
        return e.stopPropagation();
      });
      mask.bind('move', function(e) {
        img.css('left', (img.ox + e.distX) + 'px');
        img.css('top', (img.oy + e.distY) + 'px');
        return e.stopPropagation();
      });
      return mask.bind('moveend', function(e) {
        _this._kickback(img, img.width(), img.height(), mask.width(), mask.height());
        return e.stopPropagation();
      });
    };

    Postcard.prototype._showZoomButtons = function(i) {
      var zoomin, zoomout;
      zoomin = $('#zoomin' + i);
      zoomout = $('#zoomout' + i);
      if (zoomin.css('visibility') === 'hidden') {
        zoomin.css({
          'visibility': 'visible'
        });
      }
      if (zoomout.css('visibility') === 'hidden') {
        return zoomout.css({
          'visibility': 'visible'
        });
      }
    };

    Postcard.prototype._hideZoomButtons = function(i) {
      var zoomin, zoomout;
      zoomin = $('#zoomin' + i);
      zoomout = $('#zoomout' + i);
      if (zoomin.css('visibility') === 'visible') {
        zoomin.css({
          'visibility': 'hidden'
        });
      }
      if (zoomout.css('visibility') === 'visible') {
        return zoomout.css({
          'visibility': 'hidden'
        });
      }
    };

    Postcard.prototype._addMoveSupportToMaterial = function(i) {
      var img,
        _this = this;
      img = $("#material" + i);
      img.bind('movestart', function(e) {
        img.ox = img.position().left;
        img.oy = img.position().top;
        return e.stopPropagation();
      });
      img.bind('move', function(e) {
        img.css('left', (img.ox + e.distX) + 'px');
        img.css('top', (img.oy + e.distY) + 'px');
        return e.stopPropagation();
      });
      img.bind('moveend', function(e) {
        return e.stopPropagation();
      });
      img.bind('mouseover', function(e) {
        var height, newHeight, newWidth, position, width;
        position = img.position();
        width = img.width();
        height = img.height();
        newWidth = width * 1.1;
        newHeight = height * 1.1;
        return img.css({
          width: newWidth + 'px',
          height: newHeight + 'px',
          left: position.left - (newWidth - width) / 2 + 'px',
          top: position.top - (newHeight - height) / 2 + 'px',
          cursor: 'move'
        });
      });
      return img.bind('mouseout', function(e) {
        var height, newHeight, newWidth, position, width;
        position = img.position();
        width = img.width();
        height = img.height();
        newWidth = width / 1.1;
        newHeight = height / 1.1;
        return img.css({
          width: newWidth + 'px',
          height: newHeight + 'px',
          left: position.left + (width - newWidth) / 2 + 'px',
          top: position.top + (height - newHeight) / 2 + 'px',
          cursor: 'default'
        });
      });
    };

    Postcard.prototype._addMaskBorder = function(index) {
      var _this = this;
      this._eachAreas(function(i, left, top, width, height) {
        var mask;
        mask = $("#mask" + i);
        return mask.css({
          'border': '0px dashed #ffff99'
        });
      });
      return $("#mask" + index).css({
        'border': '1px dashed #ffff99'
      });
    };

    Postcard.prototype._kickback = function(img, width, height, img_window_width, img_window_height) {
      var dx, dy;
      if (width > img_window_width) {
        if (img.position().left > 0) {
          img.css('left', '0px');
        }
        dx = width - img_window_width;
        if (img.position().left < -dx) {
          img.css('left', -dx + 'px');
        }
      } else {
        if (img.position().left < 0) {
          img.css('left', '0px');
        }
        dx = img_window_width - width;
        if (img.position().left > dx) {
          img.css('left', dx + 'px');
        }
      }
      if (height > img_window_height) {
        if (img.position().top > 0) {
          img.css('top', '0px');
        }
        dy = height - img_window_height;
        if (img.position().top < -dy) {
          return img.css('top', -dy + 'px');
        }
      } else {
        if (img.position().top < 0) {
          img.css('top', '0px');
        }
        dy = img_window_height - height;
        if (img.position().top > dy) {
          return img.css('top', dy + 'px');
        }
      }
    };

    Postcard.prototype._setCurrentImage = function(i) {
      var j, _i, _ref;
      for (j = _i = 0, _ref = this.imageList.length; 0 <= _ref ? _i < _ref : _i > _ref; j = 0 <= _ref ? ++_i : --_i) {
        this.imageList[j]['current'] = false;
      }
      return this.imageList[i]['current'] = true;
    };

    Postcard.prototype._getCurrentImage = function() {
      var j, _i, _ref;
      for (j = _i = 0, _ref = this.imageList.length; 0 <= _ref ? _i < _ref : _i > _ref; j = 0 <= _ref ? ++_i : --_i) {
        if (this.imageList[j]['current'] === true) {
          return this.imageList[j];
        }
      }
    };

    Postcard.prototype.zoomin = function() {
      var image, img;
      image = this._getCurrentImage();
      image['scale'] = image['scale'] * this.zoomStep;
      img = $('#' + image['id']);
      return img.css({
        'width': img.width() * this.zoomStep,
        'height': img.height() * this.zoomStep
      });
    };

    Postcard.prototype.zoomout = function() {
      var image, img;
      image = this._getCurrentImage();
      if (image['scale'] > 1) {
        image['scale'] = image['scale'] / this.zoomStep;
        img = $('#' + image['id']);
        return img.css({
          'width': img.width() / this.zoomStep,
          'height': img.height() / this.zoomStep
        });
      }
    };

    Postcard.prototype._zoom = function(img, width, height, imageLeft, imageTop, imageWidth, imageHeight, scale) {
      var changeX, changeY, newImageHeight, newImageLeft, newImageTop, newImageWidth, prefix, ratioX, ratioY;
      newImageWidth = imageWidth * scale;
      newImageHeight = imageHeight * scale;
      ratioX = (-imageLeft + width / 2) / imageWidth;
      ratioY = (-imageTop + height / 2) / imageHeight;
      changeX = Math.abs(newImageWidth - imageWidth) * ratioX;
      changeY = Math.abs(newImageHeight - imageHeight) * ratioY;
      if (scale > 1) {
        prefix = -1;
      } else {
        prefix = 1;
      }
      newImageLeft = imageLeft + prefix * changeX;
      newImageTop = imageTop + prefix * changeY;
      return img.css({
        'width': newImageWidth + 'px',
        'height': newImageHeight + 'px',
        'left': newImageLeft + 'px',
        'top': newImageTop + 'px'
      });
    };

    Postcard.prototype.zoom_in = function(i, left, top, width, height) {
      var image, img, position;
      image = this.imageList[i];
      image['scale'] = image['scale'] * this.zoomStep;
      img = $('#' + image['id']);
      position = img.position();
      return this._zoom(img, width, height, position.left, position.top, img.width(), img.height(), this.zoomStep);
    };

    Postcard.prototype.zoom_out = function(i, left, top, width, height) {
      var image, img, mask, position;
      image = this.imageList[i];
      image['scale'] = image['scale'] / this.zoomStep;
      img = $('#' + image['id']);
      position = img.position();
      this._zoom(img, width, height, position.left, position.top, img.width(), img.height(), 1 / this.zoomStep);
      mask = $("#mask" + i);
      return this._kickback(img, img.width(), img.height(), mask.width(), mask.height());
    };

    Postcard.prototype.addImage = function(i, url) {
      var cover, img;
      img = $("#img" + i);
      img.attr('src', url);
      cover = $('#cover' + i);
      return cover.remove();
    };

    Postcard.prototype.onAreaClick = function(cb) {
      var cover, i, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = this.imageList.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        cover = $('#cover' + i);
        _results.push(cover.click(function(e) {
          return cb(parseInt(e.currentTarget.id.substr(5, 6)), e);
        }));
      }
      return _results;
    };

    return Postcard;

  })();

}).call(this);
